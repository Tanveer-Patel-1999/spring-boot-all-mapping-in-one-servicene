Spring boot interview questions
================================

1 : what is Sprig?
--> spring is a Framework which is used to making a light-weight , lossley coupled enterprise application in java.
--> It provides predines API for 
	1: Database Operations : CURD Operations
	2: Restfull web services : Integrating one serivces to another services
	3: micro services and security
	
2 : what are the features of spring Framework?
--> Spring provides features are
1 : Predeined template : JDBC Template , hibernate Template
2 : Loose coupling  : it is achive using layers mechanisum : serivces layer, presentation layer , dB layer
3 : light weight
4 : Easy to test
5 : powerfull Abstraction
6 : fast developement (RAD : rapid application developement)

3 : what is dependency injection?
--> dependency injection is a mechanisum to inject a object to a dependebt class.

4 : what are the types of Dependency injection?
--> they are 5 types of dependency injection.
1 : constructor injection
2 : setter injection
3 : Field injection : @Autowired
4 : Circular injection : A is dependent of B object and B is dependent on A object.
5 : Lookup method injection

5 : what is IOC in spring?
--> The full form of IOC is Inversion of Control
--> IOC conatiner is responsible for creating and destroying an object.

6 : what is spring Configuration file?
--> It is XML file which contains the information of classes and how these are linked each other.
--> It is called as " XML configuration file"
--> sample code like
	<bean id = "obj1" class="com.app.EmployeeService">
		<property name="empType">
			<value>export</value>
		</property>
	</bean>
	
	--> bean tag		: indicated object
	--> property tag 	: indicated setter method()
	
7 : what is spring bean?
--> spring bean is also called as object.
--> the spring bean is completely created and destroy by IOC container.
 
8 : difference between Construction and setter injection?
--> if a class have 4 variables and the constructor for those variables at the time of creating an object then u have to pass all 4 variables.

--> for that constructor injection " partial injection " is not possible.
--> but we can achieve " partial injection " by using setter injection.

--> constructor injection allways create new objection if any modification do.
--> setter injection if will not create new instaance if any modification is do.

--> if u have to pass all property in the order then you go for constructor injection.
--> if u have to pass some few property then go for setter injection.

9: what are the Bean Scope spring provided?
--> spring provided five types of scope 

--> Singleton and Prototype work for any type of application.
1 : Singleton : IOC conatiner will create only one object
2 : Prototype : IOC container will create new objecct every time

--> request and session relataed to " web application only"
3 : Request	  : the request is came from " browser " or client application and object is create in IOC container and  onces response is committed then object is actually destroy in the IOC container.
4 : Session	  : Session is nothing but Http session [ login or logout ] login session is created in IOC container and logout session is destroy in IOC container. 
5 : Global-session (not exist in new version of spring)

10 : what is Bean Wiring?
--> linking two object is called as "Wiring".
--> when the beans are Combined together inside the IOC conatiner that is called "Wired" or "Bean wiring".

exam : craete an object of EmployeeRepository and inject in the EmployeeService.

11 : what is Autowiring in Spring and what are the different modes it have?
--> setter injection
--> feild injcetion
--> constructor injcetion

12 : what is difference between @Autowired and @Inject?
--> @Autowired and @Inject are used for same purpose 
--> both are used for dependency injcetion purpose.
--> @Autowired is actually provided by spring framework.
--> @Inject is actually provided by java doubly framework.
--> spring support both @Autowired and @inject.

13 : what is the differnce between @Component and @Bean?
--> both @Component and @Bean are used to created an object.
--> @Component create object inside IOC conatiner.
--> @Component can be used if we have " source code " of a class .[ programmer- define class] at the top of the class we annotated @Component.
--> If class is " pre defined " and want to create objecct inside IOC container then we need to used @Bean (java based configuration) along with @Configuration (java based configuration).

14 : how many types of IOC container are there in Spring?
--> they are two types of container
	1 : BeanFactory : 
		--> BeanFactory is an Interface
		--> BeanFactory is responsible for creating a bean and destroy the bean.
		--> BeanFactory is take "XML" input.[xml configuration]
	
	2 : ApplicationContext :
		--> ApplicationContext is an Interface.
		--> ApplicationContext is internally extends BeanFactory Interface.
		--> It provides some extra functionality on top of BeanFactory.
		--> ApplicationContext is responsible for creating a bean and destroy the bean.		
		1 : Annoation Support
		2 : Reactive Programming etc.
		
15 : what is used of @Required Annoation in Sprig Framework?
--> @Required annotation genrally return on the top of the set() method.
--> the value of the feild must be required it not accept null value.

16 : what is the use of @Autowired annotation in spring?
--> it is used to link (Inject) two beans inside IOC container.
--> @Autowired is most commenly used injection [ link one layer : presentation layer to another layer : serivce layer ]

17 : what is the use of @Qualifier annotation in spring Framework?
--> when we create more than one bean of the same type and want to wire only one of them then we go for @Qualifier annotation.
--> to avoid the embuguity mechanisum of bean with same type then go for the @Qualifier.
--> It is used at the time of Autowired.

18 : what is @Primary Annoation in spring?
--> It is same as @Qualifier 
--> when we create more than one bean of the same type and want to wire only one of them then we go for @Primary annotation.
--> It is used at the time of bean creation.
--> @Primary is used to give highest priority.

19 : what are lifecycle method in spring?
--> they are two lifecycle method in the spring.
	1 : init() metho :
	2 : destroy() method :
--> these method are executed by default by Spring IOC container while creating Object.
--> order of executing
	1 : Creating an Object.
	2 : providing a data using setter injection
	3 : calling init() method.
	4 : destroy() method is called finally object will be destroy.
	
note : destroy() method is something do some task before destroying a object.
--> destroy() : means clean up process.
--> destroy() method not destroy an object.

20 : what are different ways of writing lifecycle method in spring?
--> they are three types :
	--> 1 : Declarative Approach  : using XML
	--> 2 : programmatic Approach : using Spring Integrating.
		implement interface : InitializingBean , DisPosableBean
	-->	3 : Annoation Approach : @PostConstruct and @PreDestroy.
	
21 : what are the common implementions of the ApplicationContext?
---> ApplicationContext is a Spring container.
	1 : FileSystemXmlApplicationContext conatiner class : present the XML file any where inside our project or from your System.
	2 : ClassPathXmlApplictionContext container class :  present the XML file  inside your project in src : resources
	3 : WebXmlApplictionContext container class : it is used when we used web based application.
	
22 : what are the Stereo type annotations?
--> if you used Stereo type annotation top of the class IOC conatiner create an object for that class.
--> they are % Stereo type annotation in Sprig framework
	1 : @Component			: it is used to create an object
	2 : @Controller			: it is used http based web based Application
	3 : @RestController		: it is used to create restfull web services.
	4 : @Service			: it is used to implement a business logic
	5 : @Repository			: it is used to implement a database operation.

23 : what are different module in spring?
-->

24 : what is profile in spring?
--> we have so mainy Environment in developement :
	1 : dev Environment
	2 : testing Environment
	3 : Staging Environment
	4 : production Environment
	5 : UAT Environment
--> if we move our application from one Environment to another Environment our property is modify.
--> modify the properties every time instead of that just activate the profile.
--> profile : Loading properties based on Environment.
--> we can activate current profile using
		--spring.profile.active=qa (by passing at runtime)

25 : what is inner bean in spring?
--> defining one bean inside another bean .
--> but it is not reusable but fast in execution 



############################## SPRING WEB MVC ##########################

1 : what is Spring WEB Module?
--> Sprig web module is module give by spring framework
--> It is used to develop both "MVC " and "Rest" application.
--> It works based on " HTTP " protocol standard.
--> It is used to develop client-server-appliction : browser to server and server-to-server apps [ google pay ,py ]

2 : what is MVC?
--> MVC : model view controller
--> Mvc is a software architecture design pattern
--> MVC is separates the fuctionality of an application into three interconnectd parts
	1 : Model
	2 : View
	3 : Controller
	
3 : What is Spring MVC?
--> Sprig Mvc is a java framework
--> Sprig MVc is used to develop " dynamic web applications".
--> spring Mvc follows MVC design pattern.
		1 : Model      : A model contain the data of the application
		2 : Controller : A controller contains the business logic of an application.
		3 : view 	   : A view is the final represnation that is given to the " end customer or client ".
		
4 : waht is the front controller of spring MVC?
--> The front controller is a DispatcherServlet class present in " org.springframework.web.servlet package.
--> It will take care of all the request and redirect to the appropriate controller and manages the flow of the application.
--> we need to configure the DispatcherServlet class in to the web.xml file.

5 : what is flow of Sprig MVC?
--> onces the request has been generated by client ,the request intercepted by the DispatcherServlet that work as the front controller.
--> DispatcherServlet forwards that request to the appropriate controller.
--> The Controller return an Object of ModelAndView.
--> finally With the help of View resolver we get a view data and read into read the data.

6 : what are the advantages of spring MVC Framework?
--> It is light-weight
--> RAD : rapid application developement
--> Flexible mapping : it provides the annotation

7 : which annotation are used for HTTP request methods?
--> @RequestMapping()
--> @PostMapping()  : creteing a new resources
--> @GetMapping()	: fetching a existing resources
--> @PutMapping()	: modifying an existing resources
--> @DeleteMapping(): deleted an existing resources
--> @PatchMapping()	: partialy modifying an existing resources

8 : Explain the Difference between @Controller and @restController
--> @RestController is combination of @Controller + @Responsebody
--> @RestController used for develop rest full services
--> when we used @Controller we must annotated our handler methoed as a @Responsebody
--> @Controller used for develop web application

9 : what are the @RequestBody and the @ResponseBody annotation?
@RequestBody :-- 
		--> @RequestBody annotation used in handler method as a parameter.
		--> @RequestBody is used to convert " JSON or XMfL data into objcet".
		--> @RequestBody is used to deserializes the incoming http request (json or xml) to the java objcet using Http message converters.
		
@ResponseBody :--
		--> @ResponseBody is used to convert java objcet into the json or xml.
		--> @ResponseBody is used to serialized the return java objcet into json. 
		
10 : how to map controller class and its methods with url?
--> @RequestMapping() annotation is used to map the controller class and it method with url.
--> @RequestMapping() annotation is used both class level and method level.

11: what is the purpose of @PathVariable annotation in spring Mvc?

http:localhost:8080/api/person/update/1 :-->  1 is the uri template variable

--> @PathVariable annotaion used on a method argument in the handler method.
--> @PathVariable annotation is used to extract the value from URI template.
--> @PathVariable annotaion used to bind the value of URI template variable to the method argument.

@PutMapping("/update/{id}")
    public ResponseEntity<Person> updatePerson(@RequestBody Person person,@PathVariable Long id){
        person.setId(id);
        return ResponseEntity.ok(person);
    }

--> {} that bracket indicates values comes at run time.
note : if the uri template name and method argument name is different  ; id == person_id
then we need to pass the uri template variable name to a @PathVariable("uri_var_name) : @PathVariable("id") Long person_id


12 : what do you understand by validations in spring MVC/
--> if end user makes a request 
--> that request contains input 
--> that input i want to validates or restric
--> It is used to validate the input provided by the user.
--> to validate the user input your spring version should be 4 or heigher.
--> you have to add " Bean Validation dependency " in your pom.xml file.
--> spring validation :
	1 : @NotNull
	2 : @Pattern
	3 : @Email
	4 : @Past
	5 : @NotBlank etc

13 : which annotaion are used to define Global Exception Handler class?
--> @ControllerAdvice with @ExceptionHandler 		: when we used web MCV
--> @RestControllerAdvice with @ExceptionHandler	: when we used web Rest
step :
	1 : we need to create one user class and annotated that class with @ControllerAdvice or @RestControllerAdvice
	2 : Then define one method and annotated that method with @ExceptionHandler()
	3 : in parameter we define ExceptionType : user not found exception : @ExceptionHandler(NotFoundException.class)
	
	
14 : Explain some Response status codes
200 status code :
----------------
1 : 200 : OK
2 : 201 : CREATED
3 : 202 : ACCEPTED
4 : 204 : NO CONTENT
5 : 206 : PARTIAL CONTENT

400 status code :
-----------------
1 : 400 : Bad Request  			: input data is invalid
2 : 401 : Unauthorized 			: login request is failed
3 : 403 : Forbidden	   			: user not allowed to access Resources
4 : 404 : Not Found	   			: Url is not exit or incorrect correct
5 : 405 : Method Not Allowed	: Request method is invalid
6 : 415 : Unsupported Media Type:

500 status code :
-----------------
1 : 500 : Internal Server Error
2 : 501 : Not Implemented
3 : 502 : Bad Gateway
4 : 503 : Service Unavailable
5 : 505 : HTTP Version Not Supported:

15 : what is cross-origin conscept in spring boot?
--> cross-origin is also called as : CORS[ cross-origin resource sharing]
--> cross-origin is a security mechanisum
--> if your request is comming from web browser by using java script application.
--> It prevent the javaScript code producing or consuming the request against different origin.
--> used @CrossOrigin("origins = "http://localhost:8080")

16: what is the purpose of @PathVariable annotation in spring Mvc?
http:localhost:8080/api/person/update/1 :-->  1 is the uri template variable

--> @PathVariable annotaion used on a method argument in the handler method.
--> @PathVariable annotation is used to extract the value from URI template.
--> @PathVariable annotaion used to bind the value of URI template variable to the method argument.

@PutMapping("/update/{id}")
    public ResponseEntity<Person> updatePerson(@RequestBody Person person,@PathVariable Long id){
        person.setId(id);
        return ResponseEntity.ok(person);
    }

--> {} that bracket indicates values comes at run time.
note : if the uri template name and method argument name is different  ; id == person_id
then we need to pass the uri template variable name to a @PathVariable("uri_var_name) : @PathVariable("id") Long person_id

17 : what is @RequestParam?

--> we can extract value from the query string.
--> we can use @RequestParam to extract "query parameter" from the request
--> http://localhost:8080/api/person/query?firstName=Tanveer&lastName=Patel	
--> firstName and lastName is the " query parameter".

//http://localhost:808/api/person/query?id=1&name=Tanveer&age=24
    @GetMapping("/person/query")
    public ResponseEntity<Person> requestParamDemo(@RequestParam(name = "id") Long id,
                                                   @RequestParam(name = "name") String name,
                                                   @RequestParam(name = "age") Integer p_age){

        Person person = new Person();
        person.setId(id);
        person.setName(name);
        person.setAge(p_age);
        return ResponseEntity.ok(person);

    }
	
note : 
1 : name of method argument and query parameter name should be different or same its our wish.
2 : we can pass the in the url query parameter name should be same as we can pass the name inside the @RequestParam.
 
18 : what is the difference between @PathVariable and @RequestParam?
-->  @RequestParam() extract a data [ value ] from tha query string.
--> @PathVariable extract a data [ value ] from url template.

19 : is @Controller and @RestController are stereotypes?
--> yes both @Controller and @RestController are stereotypes
--> @Controller is the sub typr of @Component
--> @RestController is sub type of @Controller

20 : what is the main difference between Spring core and spring Mvc?
-->


21 : what are the ways to reading the data from the form in spring mvc?
--> using HttpServletRequest interface
--> using @RequestParam() annotaion
--> using @ModelAttribute() annotaion

22 : what is ResponseEntity<T> in spring rest?
--> The final out put or RestController or RestApi is ResponseEntity.
--> ResponseEntity must be used a return type of method.
--> ResponseEntity contain Body , Http Headers and Response code.

23 : why @ReuestHeader is used in spring Mvc?
--> This annotaion is used to read Header Parameters sent by client application.



############################## Sprig data Jpa ########################

